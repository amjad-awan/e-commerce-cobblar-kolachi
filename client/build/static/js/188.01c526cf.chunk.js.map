{"version":3,"file":"static/js/188.01c526cf.chunk.js","mappings":"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","sources":["components/authform/AuthForm.js","pages/auth/Auth.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\"; // for validation schema\r\nimport \"./style.css\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\n\r\nconst AuthForm = () => {\r\n  const [register, setRegister] = useState(false);\r\n\r\n\r\n  const { registerUser, loginUser } = useAuth();\r\n\r\n  // Define validation schema for email and password\r\n  const loginValidationSchema = Yup.object().shape({\r\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n    password: Yup.string().required(\"Required\"),\r\n  });\r\n\r\n  // Define validation schema for all fields\r\n  const registerValidationSchema = Yup.object().shape({\r\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n    password: Yup.string().required(\"Required\"),\r\n    firstname: Yup.string().required(\"Required\"),\r\n    lastname: Yup.string().required(\"Required\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      firstname: \"\",\r\n      lastname: \"\",\r\n    },\r\n    validationSchema: register\r\n      ? registerValidationSchema\r\n      : loginValidationSchema,\r\n    onSubmit: async (values) => {\r\n      if (register) {\r\n        const ok = await registerUser(values);\r\n        ok && setRegister(false);\r\n      } else {\r\n        const { email, password } = values;\r\n        await loginUser({ email, password });\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className=\"flex w-[400px] justify-center items-center flex-col\">\r\n      <form onSubmit={formik.handleSubmit} className=\"w-[100%]\">\r\n        {register && (\r\n          <>\r\n            <div className=\"w-[100%] mb-[20px] h-[50px] \">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"first name\"\r\n                className=\"h-[100%] w-[100%] px-2 outline-none auth_input\"\r\n                name=\"firstname\"\r\n                {...formik.getFieldProps(\"firstname\")}\r\n              />\r\n              {formik.touched.firstname && formik.errors.firstname ? (\r\n                <div className=\"error\">{formik.errors.firstname}</div>\r\n              ) : null}\r\n            </div>\r\n            <div className=\"w-[100%] mb-[20px] h-[50px] \">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"last name\"\r\n                className=\"h-[100%] w-[100%] px-2 outline-none auth_input\"\r\n                name=\"lastname\"\r\n                {...formik.getFieldProps(\"lastname\")}\r\n              />\r\n              {formik.touched.lastname && formik.errors.lastname ? (\r\n                <div className=\"error\">{formik.errors.lastname}</div>\r\n              ) : null}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        <div className=\"w-[100%] mb-[20px] h-[50px] \">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"email\"\r\n            className=\"h-[100%] w-[100%] px-2 outline-none auth_input\"\r\n            name=\"email\"\r\n            {...formik.getFieldProps(\"email\")}\r\n          />\r\n          {formik.touched.email && formik.errors.email ? (\r\n            <div className=\"error\">{formik.errors.email}</div>\r\n          ) : null}\r\n        </div>\r\n        <div className=\"w-[100%] mb-[20px] h-[50px] \">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"password\"\r\n            className=\"h-[100%] w-[100%] px-2 outline-none auth_input\"\r\n            name=\"password\"\r\n            {...formik.getFieldProps(\"password\")}\r\n          />\r\n          {formik.touched.password && formik.errors.password ? (\r\n            <div className=\"error\">{formik.errors.password}</div>\r\n          ) : null}\r\n        </div>\r\n        <button type=\"submit\" className=\"__button uppercase w-[100%]\">\r\n          <span>{register ? \"create account\" : \"login\"}</span>\r\n          <span>{register ? \"create account\" : \"login\"}</span>\r\n        </button>\r\n      </form>\r\n      <p\r\n        className=\"text-[20px] font-[500] cursor-pointer text-[#363636] mt-6\"\r\n        onClick={() => setRegister(!register)}\r\n      >\r\n        {register\r\n          ? \"have an account? Login\"\r\n          : \" Don't have an account? Create one\"}\r\n      </p>\r\n\r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(AuthForm);\r\n","import React from \"react\";\r\nimport Layout from \"../../components/layout/Layout\";\r\nimport AuthForm from \"../../components/authform/AuthForm\";\r\n\r\nconst Auth = () => {\r\n  const hrStyle = \"w-[100%] h-[1px] bg-[rgba(255, 255, 255, 0.25)]\"\r\n  return (\r\n    <Layout>\r\n      <div className=\"container mx-auto flex justify-center items-center relative py-[30px] min-h-[90vh] mt-[113px]\">\r\n        <AuthForm />\r\n      </div>\r\n      <hr className={hrStyle} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\n\r\nexport default React.memo(Auth);\r\n\r\n"],"names":["AuthForm","_useState","useState","_useState2","_slicedToArray","register","setRegister","_useAuth","useAuth","registerUser","loginUser","loginValidationSchema","Yup","shape","email","required","password","registerValidationSchema","firstname","lastname","formik","useFormik","initialValues","validationSchema","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","sent","stop","_x","apply","arguments","_jsxs","className","children","handleSubmit","_Fragment","_jsx","_objectSpread","type","placeholder","name","getFieldProps","touched","errors","onClick","React","Auth","Layout"],"sourceRoot":""}